{"version":3,"file":"index.js","sources":["../src/Ajax.ts"],"sourcesContent":["// 该版本对于非ie支持度较为友好，ie情况支持ie10以上\ninterface Config {\n  prefix?: string // 前缀\n  url?: string // 路径\n  data?: any // 传入的参数\n  method?: string\n  splicing?: boolean // 当get请求下是否拼接data数据\n  timeout?: number\n  type?: string // 数据响应类型\n  header?: object | any\n}\n// 埋点上报文件\nclass Ajax {\n  // 私有变量部分\n  private _xhr: XMLHttpRequest\n  constructor() {\n    this._xhr = {} as XMLHttpRequest\n  }\n  // 终止接口请求\n  abort() {\n    this._xhr && this._xhr.abort()\n  }\n  // get情况下需要拼接字符格式\n  private splicing(data: any): string {\n    let params = ''\n    for (const key in data) {\n      params += `${key}=${data[key]}&`\n    }\n    params = '?' + params.substring(0, params.length - 1)\n    return params\n  }\n  // 传入参数预处理\n  private config({\n    prefix = '',\n    url = '',\n    data = {},\n    method = 'get',\n    splicing = true,\n    timeout = 1000 * 30, // 默认等待1分钟\n    type = 'json',\n    header = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  }: Config): Config {\n    method = method.toUpperCase() // 统一转换为大写\n    url = prefix + url\n    if (method === 'GET' && splicing) url = url + this.splicing(data)\n\n    const config = {\n      prefix,\n      url,\n      data,\n      splicing,\n      method,\n      timeout,\n      type,\n      header,\n    }\n\n    return config\n  }\n  // image请求方式\n  image(config: Config): void {\n    const setting: Config = this.config(config)\n\n    let image: HTMLImageElement | null\n    image = new Image()\n    image.src = setting.url as string\n\n    image = null // 清空内存\n  }\n  // xhr请求方式\n  request(config: Config): Promise<any> {\n    const { url, method, timeout, header, type } = this.config(config)\n\n    let xhr: XMLHttpRequest\n    if (window.XMLHttpRequest) xhr = new XMLHttpRequest()\n    this._xhr = xhr!\n\n    // 返回promise对象\n    return new Promise((resolve, reject) => {\n      if (!xhr) reject('版本不支持')\n      // 请求成功回调函数\n      // xhr.onload = e => {\n      //   //console.log('load', e)\n      //   resolve(e)\n      // }\n      // 请求结束\n      xhr.onloadend = (e) => {\n        const status = xhr.status\n        let data\n        if (xhr.responseType === 'text') {\n          data = xhr.responseText\n        } else if (xhr.responseType === 'document') {\n          data = xhr.responseXML\n        } else {\n          data = xhr.response\n        }\n        resolve({ data, status, xhr: e })\n      }\n      // 请求出错\n      xhr.onerror = (e) => {\n        //console.error('error', e)\n        reject(e)\n      }\n      // 请求超时\n      xhr.ontimeout = (e) => {\n        //console.error('timeout', e)\n        reject(e)\n      }\n      // 当 request 被停止时触发\n      // xhr.onabort = e => {\n      //   reject(e)\n      // }\n\n      xhr.open(method as string, url as string, true)\n\n      // 设置期望的返回数据类型\n      xhr.responseType = type as XMLHttpRequestResponseType\n      // 设置请求头\n      for (const key of Object.keys(header)) {\n        xhr.setRequestHeader(key, header[key])\n      }\n\n      xhr.send(null)\n      xhr.timeout = timeout as number\n    })\n  }\n  // 新一代fetch方式，考虑之后不做逻辑封装，业务封装更直接\n  // fetch() {}\n  // _success() {}\n  // _error() {}\n}\n\nexport default Ajax\n"],"names":["_xhr","this","abort","data","params","key","substring","length","prefix","url","method","splicing","timeout","type","header","toUpperCase","config","image","setting","Image","src","xhr","window","XMLHttpRequest","Promise","resolve","reject","onloadend","e","status","responseType","responseText","responseXML","response","onerror","ontimeout","open","Object","keys","setRequestHeader","send"],"mappings":"whBAgBSA,KAAO,+DAIPA,MAAQC,KAAKD,KAAKE,yCAGRC,OACXC,EAAS,OACR,IAAMC,KAAOF,EAChBC,aAAaC,cAAOF,EAAKE,eAE3BD,EAAS,IAAMA,EAAOE,UAAU,EAAGF,EAAOG,OAAS,6CAKnDC,OAAAA,aAAS,SACTC,IAAAA,aAAM,SACNN,KAAAA,aAAO,SACPO,OAAAA,aAAS,YACTC,SAAAA,oBACAC,QAAAA,aAAU,UACVC,KAAAA,aAAO,aACPC,OAAAA,aAAS,gBACS,qCAIlBL,EAAMD,EAASC,EACA,SAFfC,EAASA,EAAOK,gBAEQJ,IAAUF,GAAYR,KAAKU,SAASR,QAEtDa,EAAS,CACbR,OAAAA,EACAC,IAAAA,EACAN,KAAAA,EACAQ,SAAAA,EACAD,OAAAA,EACAE,QAAAA,EACAC,KAAAA,EACAC,OAAAA,UAGKE,gCAGHA,OAGAC,EAFEC,EAAkBjB,KAAKe,OAAOA,GAGpCC,EAAQ,IAAIE,MACZF,EAAMG,IAAMF,EAAQT,IAEpBQ,EAAQ,qCAGFD,OAGFK,IAF2CpB,KAAKe,OAAOA,GAAnDP,IAAAA,IAAKC,IAAAA,OAAQE,IAAAA,QAASE,IAAAA,OAAQD,IAAAA,YAGlCS,OAAOC,iBAAgBF,EAAM,IAAIE,qBAChCvB,KAAOqB,EAGL,IAAIG,SAAQ,SAACC,EAASC,GACtBL,GAAKK,EAAO,SAOjBL,EAAIM,UAAY,SAACC,OAEXzB,EADE0B,EAASR,EAAIQ,OAGjB1B,EADuB,SAArBkB,EAAIS,aACCT,EAAIU,aACmB,aAArBV,EAAIS,aACNT,EAAIW,YAEJX,EAAIY,SAEbR,EAAQ,CAAEtB,KAAAA,EAAM0B,OAAAA,EAAQR,IAAKO,KAG/BP,EAAIa,QAAU,SAACN,GAEbF,EAAOE,IAGTP,EAAIc,UAAY,SAACP,GAEfF,EAAOE,IAOTP,EAAIe,KAAK1B,EAAkBD,GAAe,GAG1CY,EAAIS,aAAejB,gBAEDwB,OAAOC,KAAKxB,kBAAS,KAA5BT,OACTgB,EAAIkB,iBAAiBlC,EAAKS,EAAOT,IAGnCgB,EAAImB,KAAK,MACTnB,EAAIT,QAAUA"}